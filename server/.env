DBURL = 'mongodb+srv://getmes:123@cluster0.4zil42k.mongodb.net/AshewaMedia?retryWrites=true&w=majority'
PASSENC= GETMES
JWTSEC = jsongetmes
REFJWT = HELLOWORLD

# /*
# const user = require("../models/user");

# const cryptoJS = require("crypto-js");
# const JWT = require("jsonwebtoken");
# const { verifyToken } = require("./verifyToken");
# const router = require("express").Router();

# //user registration
# router.post("/register", async (req, res) => {
#   const newUser = new user({
#     firstName: req.body.firstName,
#     lastName: req.body.lastName,
#     email: req.body.email,
#     phoneNumber: req.body.phoneNumber,
#     password: cryptoJS.AES.encrypt(
#       req.body.password,
#       process.env.PASSENC
#     ).toString(),
#   });
#   try {
#     const savedUser = await newUser.save();
#     res.status(200).json(savedUser);
#   } catch (error) {
#     return res.status(500).json(error);
#   }
# });

# let refereshTokens = [];
# //refreshToken
# router.post("/refersh", (req, res) => {
#   //take the refersh token from user
#   const refershToken = req.body.token;

#   //send error if there is error
#   if (!refershToken) {
#     return res.status(401).json("user is not authenticated");
#   }
#   if (!refereshTokens.includes(refershToken)) {
#     return res.status(403).json("token is not valid!");
#   }
#   //if everything is ok create accessToken,refereshToken ,and send to user
#   JWT.verify(refershToken,process.env.REFJWT,(err,user)=>{
#     err && console.log(err);

#     refereshTokens = refereshTokens.filter((token)=>token !== refershToken);

#     const newTokens = JWT.sign(
#       { id: user._id, isAdmin: user.isAdmin },
#       process.env.JWTSEC,
#       { expiresIn: "30m" }
#     );

#     const newRefereshToken = JWT.sign(
#       { id: user._id, isAdmin: user.isAdmin },
#       process.env.REFJWT
#     );
    
#     refereshTokens.push(newRefereshToken);

#     res.status(200).json({
#       tokens:newTokens,
#       refershToken:newRefereshToken
#     })
#   })

# });

# //user login
router.post("/login", async (req, res) => {
  try {
    const User = await user.findOne({
      email: req.body.email,
    });

    if (!User) {
      return res.status(404).json("User not found");
    }

    const orignalPassword = cryptoJS.AES.decrypt(
      User.password,
      process.env.PASSENC
    ).toString(cryptoJS.enc.Utf8);

    if (orignalPassword !== req.body.password) {
      return res.status(404).json("User password not found");
    }
    const { password, ...others } = User._doc;
    const tokens = JWT.sign(
      { id: User._id, isAdmin: User.isAdmin },
      process.env.JWTSEC,
      { expiresIn: "30m" }
    );

    const refreshToken = JWT.sign(
      { id: User._id, isAdmin: User.isAdmin },
      process.env.REFJWT
    );

    refereshTokens.push(refreshToken);

    res.status(200).json({ ...others, tokens, refreshToken });
  } catch (error) {
    res.status(500).json(error);
  }
});

# //logout 
# router.post("/logout",verifyToken,(req,res)=>{
#   const refereshToken = req.body.token;
#   refereshTokens = refereshTokens.filter((token)=> token !== refereshToken);
#   res.status(200).json("you are logout successfuly!")
# })

# # module.exports = router;

# */